package edu.indiana.d2i.matchmaker.ruleset1
 
import edu.indiana.d2i.matchmaker.core.*
import java.util.Set
import java.util.HashSet
import java.lang.*
import java.util.Iterator
import edu.indiana.d2i.matchmaker.pojo.*;
import edu.indiana.d2i.matchmaker.custom.ruleset1.*;


declare enum Constants
   TotalSizeAllowance(10000);
   value : Integer
end

declare enum AttType
   CRITICAL("Critical"), NONCRITICAL("NonCritical");
   value : String
end

////// Maximum Total Size ///////

rule "Maximum Total Size - Metadata check"
// description: Check whether the 'Maximum Total Size' metadata is present in both Research Object and Repository metadata.//
	salience 20
	when
		Repository(getTotalSize() == null) or ResearchObject(getTotalSize() == null)
		repo: Repository()
		mml: Ruleset1MatchMakingList()
	then
		mml.ruleFired(repo.getOrgidentifier(), "Sample0:Maximum Total Size", "Not used" , "0", AttType.CRITICAL.getValue());
end

rule "Maximum Total Size - Not matched"
// description: Check whether the maximum total size of the collection is above the maximum total size accepted by the repository. //
	salience 20
	when
		repo: Repository(getTotalSize() != null)
		researchObject : ResearchObject(getTotalSize() != null)
		eval(Double.parseDouble(repo.getTotalSize()) + Constants.TotalSizeAllowance.getValue() < Double.parseDouble(researchObject.getTotalSize()))
		mml: Ruleset1MatchMakingList()
	then
		String message = "Total size is not acceptable (<= " + repo.getTotalSize() + ")";
		mml.ruleFired(repo.getOrgidentifier(), "Sample0:Maximum Total Size", message , "-1", AttType.CRITICAL.getValue());
end

rule "Maximum Total Size - Matched"
// description: Check whether the maximum total size of the collection is below the maximum total size accepted by the repository. //
	salience 20
    when
        repo : Repository(getTotalSize() != null)
        researchObject : ResearchObject(getTotalSize() != null)
        eval(Double.parseDouble(repo.getTotalSize()) + Constants.TotalSizeAllowance.getValue() >= Double.parseDouble(researchObject.getTotalSize()))
        mml : Ruleset1MatchMakingList()
    then
    	String message = "Total size is acceptable (<= " + repo.getTotalSize() + ")";
        mml.ruleFired(repo.getOrgidentifier(), "Sample0:Maximum Total Size", message, "1", AttType.CRITICAL.getValue());
end



////// Maximum Collection Depth ///////

rule "Maximum Collection Depth - Metadata check"
// description: Check whether the 'Maximum Collection Depth' metadata is present in both Research Object and Repository metadata.//
	salience 10
	when
		Repository(getMaxCollectionDepth() == null) or ResearchObject(getMaxCollectionDepth() == null)
		repo: Repository()
		mml: Ruleset1MatchMakingList()
	then
		mml.ruleFired(repo.getOrgidentifier(), "Sample0:Maximum Collection Depth", "Not used" , "0", AttType.CRITICAL.getValue());
end

rule "Maximum Collection Depth - Not matched"
// description: Check whether the maximum collection depth of the collection is above the maximum collection depth accepted by the repository. //
	salience 10
	when
		repo: Repository(getMaxCollectionDepth() != null)
		researchObject : ResearchObject(getMaxCollectionDepth() != null)
		eval(Integer.parseInt(repo.getMaxCollectionDepth()) < Integer.parseInt(researchObject.getMaxCollectionDepth()))
		mml: Ruleset1MatchMakingList()
	then
		String message = "Collection depth is not acceptable (<= " + repo.getMaxCollectionDepth() + ")";
		mml.ruleFired(repo.getOrgidentifier(), "Sample0:Maximum Collection Depth", message , "-1", AttType.CRITICAL.getValue());
end

rule "Maximum Collection Depth - Matched"
// description: Check whether the maximum collection depth of the collection is below the maximum collection depth accepted by the repository. //
	salience 10
	when
        repo: Repository(getMaxCollectionDepth() != null)
		researchObject : ResearchObject(getMaxCollectionDepth() != null)
		eval(Integer.parseInt(repo.getMaxCollectionDepth()) >= Integer.parseInt(researchObject.getMaxCollectionDepth()))
		mml: Ruleset1MatchMakingList()
	then
		String message = "Collection depth is acceptable (<= " + repo.getMaxCollectionDepth() + ")";
		mml.ruleFired(repo.getOrgidentifier(), "Sample0:Maximum Collection Depth", message , "1", AttType.CRITICAL.getValue());
end

